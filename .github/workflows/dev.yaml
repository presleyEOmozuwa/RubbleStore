name: Dev CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
          
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'

    - name: Install dependencies for frontend
      working-directory: ./frontend/
      run: npm install

    - name: Install dependencies for backend
      working-directory: ./backend/
      run: npm install  

    - name: Run linter for React app
      working-directory: ./frontend
      run: npx eslint --fix

    - name: Run linter for Node app
      working-directory: ./backend
      run: npx standard --fix  
  
  code_scanning:
    name: "CodeQL Analysis"
    runs-on: ubuntu-latest
    needs: [lint]

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
    - name: "Checkout repository"
      uses: actions/checkout@v4

    - name: "Initialize CodeQL"
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    - name: "Perform CodeQL Analysis"
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{ matrix.language }}"
  
  build:
    runs-on: ubuntu-latest
    needs: [code_scanning]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create .env file for react app
        run: |
          echo "REACT_APP_ADMIN_EMAIL=${{ secrets.REACT_APP_ADMIN_EMAIL }}" >> ./frontend/.env
          echo "REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.REACT_APP_GOOGLE_CLIENT_ID }}" >> ./frontend/.env
      
      - name: Create .env file for node app
        run: |
          echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" >> ./backend/.env
          echo "AWS_ECR_REGISTRY=${{ secrets.AWS_ECR_REGISTRY }}" >> ./backend/.env
          echo "EASYPOST_KEY=${{ secrets.EASYPOST_KEY }}" >> ./backend/.env
          echo "EMAIL_TOKEN_KEY=${{ secrets.EMAIL_TOKEN_KEY }}" >> ./backend/.env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> ./backend/.env
          echo "MAILTRAP_HOST=${{ secrets.MAILTRAP_HOST }}" >> ./backend/.env
          echo "MAILTRAP_PASSWORD=${{ secrets.MAILTRAP_PASSWORD }}" >> ./backend/.env
          echo "MAILTRAP_PORT=${{ secrets.MAILTRAP_PORT }}" >> ./backend/.env
          echo "MAILTRAP_USER=${{ secrets.MAILTRAP_USER }}" >> ./backend/.env
          echo "MONGODB_ATLAS_URL=${{ secrets.MONGODB_ATLAS_URL }}" >> ./backend/.env
          echo "LOAD_BALANCER_BASE_URL=${{ secrets.LOAD_BALANCER_BASE_URL }}" >> ./backend/.env
          echo "OTP_SECRET_KEY=${{ secrets.OTP_SECRET_KEY }}" >> ./backend/.env
          echo "PASSWORD_HASH_KEY=${{ secrets.PASSWORD_HASH_KEY }}" >> ./backend/.env
          echo "PASSWORD_RESET_TOKEN_KEY=${{ secrets.PASSWORD_RESET_TOKEN_KEY }}" >> ./backend/.env
          echo "PORT=${{ secrets.PORT }}" >> ./backend/.env
          echo "PORTAL_RETURN_URL=${{ secrets.PORTAL_RETURN_URL }}" >> ./backend/.env
          echo "REFRESH_TOKEN_KEY=${{ secrets.REFRESH_TOKEN_KEY }}" >> ./backend/.env
          echo "REFRESH_TOKEN_KEYPLUS=${{ secrets.REFRESH_TOKEN_KEYPLUS }}" >> ./backend/.env
          echo "SESSION_SECRET_KEY=${{ secrets.SESSION_SECRET_KEY }}" >> ./backend/.env  
          echo "STRIPE_KEY=${{ secrets.STRIPE_KEY }}" >> ./backend/.env 
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Compose Build
        run: |
          docker compose -f ./docker-compose.ci.yml build

      - name: Create docker container and run react tests
        run: |
          docker compose -f ./docker-compose.ci.yml run --rm frontend npm test
      
      - name: Create docker container and run node tests
        run: |
          docker compose -f ./docker-compose.ci.yml run --rm backend npm test

  terraform-plan:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    needs: [build]
    name: Create terraform plan
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: terraform plan
        uses: dflook/terraform-plan@v1
        with:
          path: ./infra/      